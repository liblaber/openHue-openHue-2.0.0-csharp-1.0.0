// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using OpenHue.Json;

namespace OpenHue.Models;

public record DevicePut(
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        DevicePut.DevicePutType? Type_ = null,
    [property:
        JsonPropertyName("metadata"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        DevicePut.DevicePutMetadata? Metadata = null,
    [property:
        JsonPropertyName("identify"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        DevicePut.Identify? Identify_ = null,
    [property:
        JsonPropertyName("usertest"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        DevicePut.DevicePutUsertest? Usertest = null
)
{
    public record DevicePutType : ValueEnum<string>
    {
        internal DevicePutType(string value)
            : base(value) { }

        public DevicePutType()
            : base("device") { }

        public static DevicePutType Device = new("device");
    }

    public record DevicePutMetadata(
        /// <value>Human readable name of a resource</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>The default archetype given by manufacturer. Can be changed by user.</value>
        [property:
            JsonPropertyName("archetype"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            ProductArchetype? Archetype = null
    );

    public record Identify(
        /// <value>
        /// Triggers a visual identification sequence, current implemented as (which can change in the future):
        /// Bridge performs Zigbee LED identification cycles for 5 seconds Lights perform one breathe cycle Sensors
        /// perform LED identification cycles for 15 seconds
        /// </value>
        [property:
            JsonPropertyName("action"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Identify.IdentifyAction? Action = null
    )
    {
        /// <summary>
        /// Triggers a visual identification sequence, current implemented as (which can change in the future):
        /// Bridge performs Zigbee LED identification cycles for 5 seconds Lights perform one breathe cycle Sensors
        /// perform LED identification cycles for 15 seconds
        /// </summary>
        public record IdentifyAction : ValueEnum<string>
        {
            internal IdentifyAction(string value)
                : base(value) { }

            public IdentifyAction()
                : base("identify") { }

            public static IdentifyAction Identify = new("identify");
        }
    }

    public record DevicePutUsertest(
        /// <value>
        /// Activates or extends user usertest mode of device for 120 seconds.
        /// `false` deactivates usertest mode. In usertest mode, devices report changes in state faster and indicate
        /// state changes on device LED (if applicable)
        /// </value>
        [property:
            JsonPropertyName("usertest"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Usertest = null
    );
}
