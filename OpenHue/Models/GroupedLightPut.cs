// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using OpenHue.Json;

namespace OpenHue.Models;

public record GroupedLightPut(
    /// <value>Type of the supported resources (always `grouped_light` here)</value>
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GroupedLightPut.GroupedLightPutType? Type_ = null,
    [property: JsonPropertyName("on"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        On? On = null,
    [property:
        JsonPropertyName("dimming"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Dimming? Dimming = null,
    [property:
        JsonPropertyName("dimming_delta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        DimmingDelta? DimmingDelta = null,
    [property:
        JsonPropertyName("color_temperature"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ColorTemperature? ColorTemperature = null,
    [property:
        JsonPropertyName("color_temperature_delta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ColorTemperatureDelta? ColorTemperatureDelta = null,
    [property:
        JsonPropertyName("color"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Color? Color = null,
    /// <value>Joined alert control</value>
    [property:
        JsonPropertyName("alert"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Alert? Alert = null,
    /// <value>Feature containing basic signaling properties.</value>
    [property:
        JsonPropertyName("signaling"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Signaling? Signaling = null,
    [property:
        JsonPropertyName("dynamics"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Dynamics2? Dynamics = null
)
{
    /// <summary>Type of the supported resources (always `grouped_light` here)</summary>
    public record GroupedLightPutType : ValueEnum<string>
    {
        internal GroupedLightPutType(string value)
            : base(value) { }

        public GroupedLightPutType()
            : base("grouped_light") { }

        public static GroupedLightPutType GroupedLight = new("grouped_light");
    }
}
