// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace OpenHue.Models;

public record TemperatureGet(
    /// <value>Type of the supported resources</value>
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Type_ = null,
    /// <value>Unique identifier representing a specific resource instance</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>Clip v1 resource identifier</value>
    [property:
        JsonPropertyName("id_v1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? IdV1 = null,
    [property:
        JsonPropertyName("owner"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ResourceIdentifier? Owner = null,
    /// <value>
    /// `true` when sensor is activated, `false` when deactivated
    /// </value>
    [property:
        JsonPropertyName("enabled"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? Enabled = null,
    [property:
        JsonPropertyName("temperature"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        TemperatureGet.Temperature? Temperature_ = null
)
{
    public record Temperature(
        /// <value>Deprecated. Moved to Temperature_report/temperature</value>
        [property:
            JsonPropertyName("temperature"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Temperature_ = null,
        /// <value>Deprecated. Indication whether the value presented in temperature is valid</value>
        [property:
            JsonPropertyName("temperature_valid"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? TemperatureValid = null,
        [property:
            JsonPropertyName("temperature_report"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Temperature.TemperatureReport? TemperatureReport_ = null
    )
    {
        public record TemperatureReport(
            /// <value>last time the value of this property is changed.</value>
            [property:
                JsonPropertyName("changed"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Changed = null,
            /// <value>Temperature in 1.00 degrees Celsius</value>
            [property:
                JsonPropertyName("temperature"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                double? Temperature = null
        );
    }
}
