// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace OpenHue.Models;

public record RoomGet(
    /// <value>Type of the supported resources</value>
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Type_ = null,
    /// <value>Unique identifier representing a specific resource instance</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>Clip v1 resource identifier</value>
    [property:
        JsonPropertyName("id_v1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? IdV1 = null,
    /// <value>Child devices/services to group by the derived group</value>
    [property:
        JsonPropertyName("children"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<ResourceIdentifier>? Children = null,
    /// <value>
    /// References all services aggregating control and state of children in the group.
    /// This includes all services grouped in the group hierarchy given by child relation.
    /// This includes all services of a device grouped in the group hierarchy given by child relation.
    /// Aggregation is per service type, ie every service type which can be grouped has a corresponding definition of
    /// grouped type.
    /// Supported types: â€“ grouped_light
    /// </value>
    [property:
        JsonPropertyName("services"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<ResourceIdentifier>? Services = null,
    /// <value>configuration object for a room</value>
    [property:
        JsonPropertyName("metadata"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        RoomGet.RoomGetMetadata? Metadata = null
)
{
    /// <summary>configuration object for a room</summary>
    public record RoomGetMetadata(
        /// <value>Human readable name of a resource</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>Possible archetypes of a room</value>
        [property:
            JsonPropertyName("archetype"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            RoomArchetype? Archetype = null
    );
}
