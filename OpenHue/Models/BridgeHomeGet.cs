// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using OpenHue.Json;

namespace OpenHue.Models;

public record BridgeHomeGet(
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        BridgeHomeGet.BridgeHomeGetType? Type_ = null,
    /// <value>Unique identifier representing a specific resource instance</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>Clip v1 resource identifier</value>
    [property:
        JsonPropertyName("id_v1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? IdV1 = null,
    /// <value>Child devices/services to group by the derived group.</value>
    [property:
        JsonPropertyName("children"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<ResourceIdentifier>? Children = null,
    /// <value>
    /// References all services aggregating control and state of children in the group.
    /// This includes all services grouped in the group hierarchy given by child relation.
    /// This includes all services of a device grouped in the group hierarchy given by child relation.
    /// Aggregation is per service type, ie every service type which can be grouped has a corresponding definition
    /// of grouped type Supported types: â€“ grouped_light
    /// </value>
    [property:
        JsonPropertyName("services"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<ResourceIdentifier>? Services = null
)
{
    public record BridgeHomeGetType : ValueEnum<string>
    {
        internal BridgeHomeGetType(string value)
            : base(value) { }

        public BridgeHomeGetType()
            : base("bridge_home") { }

        public static BridgeHomeGetType BridgeHome = new("bridge_home");
    }
}
