// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using OpenHue.Json;

namespace OpenHue.Models;

public record SceneGet(
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        SceneGet.SceneGetType? Type_ = null,
    /// <value>Unique identifier representing a specific resource instance</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>Clip v1 resource identifier</value>
    [property:
        JsonPropertyName("id_v1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? IdV1 = null,
    [property:
        JsonPropertyName("owner"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ResourceIdentifier? Owner = null,
    /// <value>List of actions to be executed synchronously on recall</value>
    [property:
        JsonPropertyName("actions"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<ActionGet>? Actions = null,
    [property:
        JsonPropertyName("metadata"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        SceneMetadata? Metadata = null,
    [property:
        JsonPropertyName("group"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ResourceIdentifier? Group = null,
    /// <value>Group of colors that describe the palette of colors to be used when playing dynamics</value>
    [property:
        JsonPropertyName("palette"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ScenePalette? Palette = null,
    /// <value>Speed of dynamic palette for this scene</value>
    [property:
        JsonPropertyName("speed"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? Speed = null,
    /// <value>Indicates whether to automatically start the scene dynamically on active recall</value>
    [property:
        JsonPropertyName("auto_dynamic"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? AutoDynamic = null,
    [property:
        JsonPropertyName("status"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        SceneGet.SceneGetStatus? Status = null
)
{
    public record SceneGetType : ValueEnum<string>
    {
        internal SceneGetType(string value)
            : base(value) { }

        public SceneGetType()
            : base("scene") { }

        public static SceneGetType Scene = new("scene");
    }

    public record SceneGetStatus(
        [property:
            JsonPropertyName("active"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            SceneGetStatus.Active? Active_ = null
    )
    {
        public record Active : ValueEnum<string>
        {
            internal Active(string value)
                : base(value) { }

            public Active()
                : base("inactive") { }

            public static Active Inactive = new("inactive");
            public static Active Static_ = new("static");
            public static Active DynamicPalette = new("dynamic_palette");
        }
    }
}
