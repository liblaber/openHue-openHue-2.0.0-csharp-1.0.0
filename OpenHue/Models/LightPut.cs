// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using OpenHue.Json;

namespace OpenHue.Models;

public record LightPut(
    /// <value>Type of the supported resources (always `light` here)</value>
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Type_ = null,
    [property: JsonPropertyName("on"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        On? On = null,
    [property:
        JsonPropertyName("dimming"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Dimming? Dimming = null,
    [property:
        JsonPropertyName("dimming_delta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        DimmingDelta? DimmingDelta = null,
    [property:
        JsonPropertyName("color_temperature"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ColorTemperature? ColorTemperature = null,
    [property:
        JsonPropertyName("color_temperature_delta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ColorTemperatureDelta? ColorTemperatureDelta = null,
    [property:
        JsonPropertyName("color"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Color? Color = null,
    [property:
        JsonPropertyName("dynamics"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Dynamics? Dynamics = null,
    /// <value>Joined alert control</value>
    [property:
        JsonPropertyName("alert"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Alert? Alert = null,
    /// <value>Feature containing basic signaling properties.</value>
    [property:
        JsonPropertyName("signaling"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Signaling? Signaling = null,
    [property:
        JsonPropertyName("mode"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        LightPut.LightPutMode? Mode = null,
    /// <value>Basic feature containing gradient properties.</value>
    [property:
        JsonPropertyName("gradient"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Gradient? Gradient = null,
    /// <value>Basic feature containing effect properties.</value>
    [property:
        JsonPropertyName("effects"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Effects? Effects = null,
    /// <value>Basic feature containing timed effect properties.</value>
    [property:
        JsonPropertyName("timed_effects"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        LightPut.LightPutTimedEffects? TimedEffects = null,
    /// <value>Feature containing properties to configure powerup behaviour of a lightsource.</value>
    [property:
        JsonPropertyName("powerup"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Powerup? Powerup = null
)
{
    public record LightPutMode : ValueEnum<string>
    {
        internal LightPutMode(string value)
            : base(value) { }

        public LightPutMode()
            : base("normal") { }

        public static LightPutMode Normal = new("normal");
        public static LightPutMode Streaming = new("streaming");
    }

    /// <summary>Basic feature containing timed effect properties.</summary>
    public record LightPutTimedEffects(
        /// <value>Current status values the light is in regarding timed effects</value>
        [property:
            JsonPropertyName("effect"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            SupportedTimedEffects? Effect = null,
        /// <value>Duration is mandatory when timed effect is set except for no_effect. Resolution decreases for a larger duration. e.g Effects with duration smaller than a minute will be rounded to a resolution of 1s, while effects with duration larger than an hour will be arounded up to a resolution of 300s. Duration has a max of 21600000 ms.</value>
        [property:
            JsonPropertyName("duration"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Duration = null
    );
}
