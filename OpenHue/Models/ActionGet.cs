// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace OpenHue.Models;

public record ActionGet(
    /// <value>Type of the supported resources</value>
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Type_ = null,
    /// <value>Unique identifier representing a specific resource instance</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>Clip v1 resource identifier</value>
    [property:
        JsonPropertyName("id_v1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? IdV1 = null,
    [property:
        JsonPropertyName("owner"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ResourceIdentifier? Owner = null,
    [property:
        JsonPropertyName("target"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ResourceIdentifier? Target = null,
    /// <value>The action to be executed on recall</value>
    [property:
        JsonPropertyName("action"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ActionGet.ActionGetAction? Action = null
)
{
    /// <summary>The action to be executed on recall</summary>
    public record ActionGetAction(
        [property:
            JsonPropertyName("on"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            On? On = null,
        [property:
            JsonPropertyName("dimming"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Dimming? Dimming = null,
        [property:
            JsonPropertyName("color"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Color? Color = null,
        [property:
            JsonPropertyName("color_temperature"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            ColorTemperature? ColorTemperature = null,
        /// <value>Basic feature containing gradient properties.</value>
        [property:
            JsonPropertyName("gradient"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Gradient? Gradient = null,
        /// <value>Basic feature containing effect properties.</value>
        [property:
            JsonPropertyName("effects"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            ActionGetAction.ActionEffects1? Effects = null
    )
    {
        /// <summary>Basic feature containing effect properties.</summary>
        public record ActionEffects1(
            [property:
                JsonPropertyName("effect"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                SupportedEffects? Effect = null
        );
    }
}
