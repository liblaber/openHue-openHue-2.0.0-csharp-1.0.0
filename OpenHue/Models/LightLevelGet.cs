// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace OpenHue.Models;

public record LightLevelGet(
    /// <value>Type of the supported resources</value>
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Type_ = null,
    /// <value>Unique identifier representing a specific resource instance</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>Clip v1 resource identifier</value>
    [property:
        JsonPropertyName("id_v1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? IdV1 = null,
    [property:
        JsonPropertyName("owner"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ResourceIdentifier? Owner = null,
    /// <value>true when sensor is activated, false when deactivated</value>
    [property:
        JsonPropertyName("enabled"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? Enabled = null,
    [property:
        JsonPropertyName("light"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        LightLevelGet.Light? Light_ = null
)
{
    public record Light(
        /// <value>Deprecated. Moved to light_level_report/light_level</value>
        [property:
            JsonPropertyName("light_level"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? LightLevel = null,
        /// <value>Deprecated. Indication whether the value presented in light_level is valid</value>
        [property:
            JsonPropertyName("light_level_valid"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? LightLevelValid = null,
        [property:
            JsonPropertyName("light_level_report"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Light.LightLevelReport? LightLevelReport_ = null
    )
    {
        public record LightLevelReport(
            /// <value>last time the value of this property is changed.</value>
            [property:
                JsonPropertyName("changed"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Changed = null,
            /// <value>
            /// Light level in 10000*log10(lux) +1 measured by sensor.
            /// Logarithmic scale used because the human eye adjusts to light levels and small changes at low
            /// lux levels are more noticeable than at high lux levels.
            /// This allows use of linear scale configuration sliders.
            /// </value>
            [property:
                JsonPropertyName("light_level"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                long? LightLevel = null
        );
    }
}
