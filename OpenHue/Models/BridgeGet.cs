// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using OpenHue.Json;

namespace OpenHue.Models;

public record BridgeGet(
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        BridgeGet.BridgeGetType? Type_ = null,
    /// <value>Unique identifier representing a specific resource instance</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>Clip v1 resource identifier</value>
    [property:
        JsonPropertyName("id_v1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? IdV1 = null,
    [property:
        JsonPropertyName("owner"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ResourceIdentifier? Owner = null,
    /// <value>Unique identifier of the bridge as printed on the device. Lower case (shouldn't it be upper case?)</value>
    [property:
        JsonPropertyName("bridge_id"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? BridgeId = null,
    [property:
        JsonPropertyName("time_zone"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        BridgeGet.TimeZone? TimeZone_ = null
)
{
    public record BridgeGetType : ValueEnum<string>
    {
        internal BridgeGetType(string value)
            : base(value) { }

        public BridgeGetType()
            : base("bridge") { }

        public static BridgeGetType Bridge = new("bridge");
    }

    public record TimeZone(
        /// <value>Time zone where the user's home is located (as Olson ID).</value>
        [property:
            JsonPropertyName("time_zone"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? TimeZone_ = null
    );
}
