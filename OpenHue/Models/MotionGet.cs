// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using OpenHue.Json;

namespace OpenHue.Models;

public record MotionGet(
    /// <value>Type of the supported resources</value>
    [property:
        JsonPropertyName("type"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Type_ = null,
    /// <value>Unique identifier representing a specific resource instance</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>Clip v1 resource identifier</value>
    [property:
        JsonPropertyName("id_v1"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? IdV1 = null,
    [property:
        JsonPropertyName("owner"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ResourceIdentifier? Owner = null,
    /// <value>ture when the sensor is activated, false when deactivated</value>
    [property:
        JsonPropertyName("enabled"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? Enabled = null,
    [property:
        JsonPropertyName("motion"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        MotionGet.Motion? Motion_ = null,
    [property:
        JsonPropertyName("sensitivity"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        MotionGet.MotionGetSensitivity? Sensitivity = null
)
{
    public record Motion(
        /// <value>Deprecated. Moved to motion_report/motion.</value>
        [property:
            JsonPropertyName("motion"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Motion_ = null,
        /// <value>Deprecated. Motion is valid when motion_report property is present, invalid when absent.</value>
        [property:
            JsonPropertyName("motion_valid"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? MotionValid = null,
        [property:
            JsonPropertyName("motion_report"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Motion.MotionReport? MotionReport_ = null
    )
    {
        public record MotionReport(
            /// <value>last time the value of this property is changed</value>
            [property:
                JsonPropertyName("changed"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Changed = null,
            /// <value>true if motion is detected</value>
            [property:
                JsonPropertyName("motion"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? Motion = null
        );
    }

    public record MotionGetSensitivity(
        [property:
            JsonPropertyName("status"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            MotionGetSensitivity.SensitivityStatus? Status = null,
        /// <value>Sensitivity of the sensor. Value in the range 0 to sensitivity_max</value>
        [property:
            JsonPropertyName("sensitivity"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Sensitivity = null,
        /// <value>Maximum value of the sensitivity configuration attribute.</value>
        [property:
            JsonPropertyName("sensitivity_max"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? SensitivityMax = null
    )
    {
        public record SensitivityStatus : ValueEnum<string>
        {
            internal SensitivityStatus(string value)
                : base(value) { }

            public SensitivityStatus()
                : base("set") { }

            public static SensitivityStatus Set = new("set");
            public static SensitivityStatus Changing = new("changing");
        }
    }
}
