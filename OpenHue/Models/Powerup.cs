// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using OpenHue.Json;

namespace OpenHue.Models;

/// <summary>Feature containing properties to configure powerup behaviour of a lightsource.</summary>
public record Powerup(
    /// <value>When setting the custom preset the additional properties can be set. For all other presets, no other properties can be included.</value>
    [property:
        JsonPropertyName("preset"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Powerup.PowerupPreset2? Preset = null,
    /// <value>Indicates if the shown values have been configured in the lightsource.</value>
    [property:
        JsonPropertyName("configured"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? Configured = null,
    [property: JsonPropertyName("on"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        Powerup.PowerupOn2? On = null,
    [property:
        JsonPropertyName("dimming"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        Powerup.PowerupDimming2? Dimming = null
)
{
    /// <summary>When setting the custom preset the additional properties can be set. For all other presets, no other properties can be included.</summary>
    public record PowerupPreset2 : ValueEnum<string>
    {
        internal PowerupPreset2(string value)
            : base(value) { }

        public PowerupPreset2()
            : base("safety") { }

        public static PowerupPreset2 Safety = new("safety");
        public static PowerupPreset2 Powerfail = new("powerfail");
        public static PowerupPreset2 LastOnState = new("last_on_state");
        public static PowerupPreset2 Custom = new("custom");
    }

    public record PowerupOn2(
        /// <value>
        /// State to activate after powerup.
        /// On will use the value specified in the “on” property.
        /// When setting mode “on”, the on property must be included.
        /// Toggle will alternate between on and off on each subsequent power toggle.
        /// Previous will return to the state it was in before powering off.
        /// </value>
        [property:
            JsonPropertyName("mode"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            PowerupOn2.OnMode2? Mode = null,
        [property:
            JsonPropertyName("on"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            On? On = null
    )
    {
        /// <summary>
        /// State to activate after powerup.
        /// On will use the value specified in the “on” property.
        /// When setting mode “on”, the on property must be included.
        /// Toggle will alternate between on and off on each subsequent power toggle.
        /// Previous will return to the state it was in before powering off.
        /// </summary>
        public record OnMode2 : ValueEnum<string>
        {
            internal OnMode2(string value)
                : base(value) { }

            public OnMode2()
                : base("on") { }

            public static OnMode2 On = new("on");
            public static OnMode2 Toggle = new("toggle");
            public static OnMode2 Previous = new("previous");
        }
    }

    public record PowerupDimming2(
        /// <value>
        /// Dimming will set the brightness to the specified value after power up.
        /// When setting mode “dimming”, the dimming property must be included.
        /// Previous will set brightness to the state it was in before powering off.
        /// </value>
        [property:
            JsonPropertyName("mode"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            PowerupDimming2.DimmingMode2? Mode = null,
        /// <value>Brightness percentage. value cannot be 0, writing 0 changes it to lowest possible brightness</value>
        [property:
            JsonPropertyName("dimming"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Dimming = null,
        [property:
            JsonPropertyName("color"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            PowerupDimming2.DimmingColor2? Color = null
    )
    {
        /// <summary>
        /// Dimming will set the brightness to the specified value after power up.
        /// When setting mode “dimming”, the dimming property must be included.
        /// Previous will set brightness to the state it was in before powering off.
        /// </summary>
        public record DimmingMode2 : ValueEnum<string>
        {
            internal DimmingMode2(string value)
                : base(value) { }

            public DimmingMode2()
                : base("dimming") { }

            public static DimmingMode2 Dimming = new("dimming");
            public static DimmingMode2 Previous = new("previous");
        }

        public record DimmingColor2(
            /// <value>State to activate after powerup. Availability of “color_temperature” and “color” modes depend on the capabilities of the lamp. Colortemperature will set the colortemperature to the specified value after power up. When setting color_temperature, the color_temperature property must be included Color will set the color tot he specified value after power up. When setting color mode, the color property must be included Previous will set color to the state it was in before powering off.</value>
            [property:
                JsonPropertyName("mode"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                DimmingColor2.ColorMode2? Mode = null,
            [property:
                JsonPropertyName("color_temperature"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                DimmingColor2.ColorColorTemperature2? ColorTemperature = null
        )
        {
            /// <summary>State to activate after powerup. Availability of “color_temperature” and “color” modes depend on the capabilities of the lamp. Colortemperature will set the colortemperature to the specified value after power up. When setting color_temperature, the color_temperature property must be included Color will set the color tot he specified value after power up. When setting color mode, the color property must be included Previous will set color to the state it was in before powering off.</summary>
            public record ColorMode2 : ValueEnum<string>
            {
                internal ColorMode2(string value)
                    : base(value) { }

                public ColorMode2()
                    : base("color_temperature") { }

                public static ColorMode2 ColorTemperature = new("color_temperature");
                public static ColorMode2 Color = new("color");
                public static ColorMode2 Previous = new("previous");
            }

            public record ColorColorTemperature2(
                /// <value>color temperature in mirek or null when the light color is not in the ct spectrum</value>
                [property:
                    JsonPropertyName("mirek"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    long? Mirek = null,
                [property:
                    JsonPropertyName("color"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    Color? Color = null
            );
        }
    }
}
