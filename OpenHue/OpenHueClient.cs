// This file was generated by liblab | https://liblab.com/

using OpenHue.Config;
using OpenHue.Http.Handlers;
using OpenHue.Services;
using Environment = OpenHue.Http.Environment;

namespace OpenHue;

public class OpenHueClient : IDisposable
{
    private readonly HttpClient _httpClient;
    private readonly TokenHandler _apiKeyHandler;

    public AuthService Auth { get; private set; }
    public ResourceService Resource { get; private set; }
    public DeviceService Device { get; private set; }
    public DevicePowerService DevicePower { get; private set; }
    public LightService Light { get; private set; }
    public LightLevelService LightLevel { get; private set; }
    public MotionService Motion { get; private set; }
    public GroupedLightService GroupedLight { get; private set; }
    public BridgeService Bridge { get; private set; }
    public BridgeHomeService BridgeHome { get; private set; }
    public SceneService Scene { get; private set; }
    public RoomService Room { get; private set; }
    public ZoneService Zone { get; private set; }
    public TemperatureService Temperature { get; private set; }

    public OpenHueClient(OpenHueConfig? config = null)
    {
        var retryHandler = new RetryHandler();
        _apiKeyHandler = new TokenHandler(retryHandler)
        {
            Header = config?.ApiKeyAuth?.ApiKeyHeader ?? ApiKeyAuthConfig.DefaultApiKeyHeader,
            Prefix = "",
            Token = config?.ApiKeyAuth?.ApiKey
        };

        _httpClient = new HttpClient(_apiKeyHandler)
        {
            BaseAddress = config?.Environment?.Uri ?? Environment.Default.Uri,
            DefaultRequestHeaders = { { "user-agent", "dotnet/7.0" } }
        };

        Auth = new AuthService(_httpClient);
        Resource = new ResourceService(_httpClient);
        Device = new DeviceService(_httpClient);
        DevicePower = new DevicePowerService(_httpClient);
        Light = new LightService(_httpClient);
        LightLevel = new LightLevelService(_httpClient);
        Motion = new MotionService(_httpClient);
        GroupedLight = new GroupedLightService(_httpClient);
        Bridge = new BridgeService(_httpClient);
        BridgeHome = new BridgeHomeService(_httpClient);
        Scene = new SceneService(_httpClient);
        Room = new RoomService(_httpClient);
        Zone = new ZoneService(_httpClient);
        Temperature = new TemperatureService(_httpClient);
    }

    /// <summary>
    /// Set the environment for the entire SDK.
    /// </summary>
    public void SetEnvironment(Environment environment)
    {
        SetBaseUrl(environment.Uri);
    }

    /// <summary>
    /// Sets the base URL for entire SDK.
    /// </summary>
    public void SetBaseUrl(string baseUrl)
    {
        SetBaseUrl(new Uri(baseUrl));
    }

    /// <summary>
    /// Sets the base URL for the entire SDK.
    /// </summary>
    public void SetBaseUrl(Uri uri)
    {
        _httpClient.BaseAddress = uri;
    }

    /// <summary>
    /// Sets the API key for the entire SDK.
    /// </summary>
    public void SetApiKey(string apiKey)
    {
        _apiKeyHandler.Token = apiKey;
    }

    /// <summary>
    /// Sets the API key header for the entire SDK.
    /// </summary>
    public void SetApiKeyHeader(string apiKeyHeader)
    {
        _apiKeyHandler.Header = apiKeyHeader;
    }

    public void Dispose()
    {
        _httpClient.Dispose();
    }
}

// c029837e0e474b76bc487506e8799df5e3335891efe4fb02bda7a1441840310c
