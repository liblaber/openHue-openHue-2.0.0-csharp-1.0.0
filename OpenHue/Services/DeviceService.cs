// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using OpenHue.Http;
using OpenHue.Http.Exceptions;
using OpenHue.Http.Extensions;
using OpenHue.Http.Serialization;
using OpenHue.Models;

namespace OpenHue.Services;

public class DeviceService : BaseService
{
    internal DeviceService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>List all available devices</summary>
    public async Task<GetDevicesOkResponse> GetDevicesAsync(
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/device").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetDevicesOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get details of a single device from its given `{deviceId}`.</summary>
    /// <param name="deviceId">ID of the device</param>
    public async Task<GetDeviceOkResponse> GetDeviceAsync(
        string deviceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(deviceId, nameof(deviceId));

        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/device/{deviceId}")
            .SetPathParameter("deviceId", deviceId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetDeviceOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Update a single device from its given `{deviceId}`.</summary>
    /// <param name="deviceId">ID of the device</param>
    public async Task<UpdateDeviceOkResponse> UpdateDeviceAsync(
        DevicePut input,
        string deviceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(deviceId, nameof(deviceId));

        var request = new RequestBuilder(HttpMethod.Put, "clip/v2/resource/device/{deviceId}")
            .SetPathParameter("deviceId", deviceId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<UpdateDeviceOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Delete a single Device from its given `{deviceId}`. The `bridge` device cannot be deleted.</summary>
    /// <param name="deviceId">ID of the Device</param>
    public async Task<DeleteDeviceOkResponse> DeleteDeviceAsync(
        string deviceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(deviceId, nameof(deviceId));

        var request = new RequestBuilder(HttpMethod.Delete, "clip/v2/resource/device/{deviceId}")
            .SetPathParameter("deviceId", deviceId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<DeleteDeviceOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
