// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using OpenHue.Http;
using OpenHue.Http.Exceptions;
using OpenHue.Http.Extensions;
using OpenHue.Http.Serialization;
using OpenHue.Models;

namespace OpenHue.Services;

public class LightLevelService : BaseService
{
    internal LightLevelService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>List all available light levels.</summary>
    public async Task<GetLightLevelsOkResponse> GetLightLevelsAsync(
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/light_level").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetLightLevelsOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get details of a single light from its given `{lightId}`.</summary>
    /// <param name="lightId">ID of the light</param>
    public async Task<GetLightLevelOkResponse> GetLightLevelAsync(
        string lightId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(lightId, nameof(lightId));

        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/light_level/{lightId}")
            .SetPathParameter("lightId", lightId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetLightLevelOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Update a single light from its given `{lightId}`.</summary>
    /// <param name="lightId">ID of the light</param>
    public async Task<UpdateLightLevelOkResponse> UpdateLightLevelAsync(
        LightLevelPut input,
        string lightId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(lightId, nameof(lightId));

        var request = new RequestBuilder(HttpMethod.Put, "clip/v2/resource/light_level/{lightId}")
            .SetPathParameter("lightId", lightId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<UpdateLightLevelOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
