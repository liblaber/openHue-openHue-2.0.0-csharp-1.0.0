// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using OpenHue.Http;
using OpenHue.Http.Exceptions;
using OpenHue.Http.Extensions;
using OpenHue.Http.Serialization;
using OpenHue.Models;

namespace OpenHue.Services;

public class BridgeService : BaseService
{
    internal BridgeService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>List all available bridges</summary>
    public async Task<GetBridgesOkResponse> GetBridgesAsync(
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/bridge").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetBridgesOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get details of a single bridge from its given `{bridgeId}`.</summary>
    /// <param name="bridgeId">ID of the bridge</param>
    public async Task<GetBridgeOkResponse> GetBridgeAsync(
        string bridgeId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(bridgeId, nameof(bridgeId));

        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/bridge/{bridgeId}")
            .SetPathParameter("bridgeId", bridgeId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetBridgeOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Update a single bridge from its given `{bridgeId}`.</summary>
    /// <param name="bridgeId">ID of the bridge</param>
    public async Task<UpdateBridgeOkResponse> UpdateBridgeAsync(
        BridgePut input,
        string bridgeId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(bridgeId, nameof(bridgeId));

        var request = new RequestBuilder(HttpMethod.Put, "clip/v2/resource/bridge/{bridgeId}")
            .SetPathParameter("bridgeId", bridgeId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<UpdateBridgeOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
