// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using OpenHue.Http;
using OpenHue.Http.Exceptions;
using OpenHue.Http.Extensions;
using OpenHue.Http.Serialization;
using OpenHue.Models;

namespace OpenHue.Services;

public class TemperatureService : BaseService
{
    internal TemperatureService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>List all temperatures</summary>
    public async Task<GetTemperaturesOkResponse> GetTemperaturesAsync(
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/temperature").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetTemperaturesOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get details of a single temperature sensor from its given `{temperatureId}`.</summary>
    /// <param name="temperatureId">ID of the temperature sensor</param>
    public async Task<GetTemperatureOkResponse> GetTemperatureAsync(
        string temperatureId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(temperatureId, nameof(temperatureId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "clip/v2/resource/temperature/{temperatureId}"
        )
            .SetPathParameter("temperatureId", temperatureId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetTemperatureOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Update a temperature sensor from its given `{temperatureId}`.</summary>
    /// <param name="temperatureId">ID of the temperature sensor</param>
    public async Task<UpdateTemperatureOkResponse> UpdateTemperatureAsync(
        TemperaturePut input,
        string temperatureId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(temperatureId, nameof(temperatureId));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "clip/v2/resource/temperature/{temperatureId}"
        )
            .SetPathParameter("temperatureId", temperatureId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<UpdateTemperatureOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
