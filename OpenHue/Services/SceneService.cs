// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using OpenHue.Http;
using OpenHue.Http.Serialization;
using OpenHue.Models;

namespace OpenHue.Services;

public class SceneService : BaseService
{
    internal SceneService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>List all available scenes</summary>
    public async Task<GetScenesOkResponse> GetScenesAsync(
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/scene").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetScenesOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Creates a new scene</summary>
    public async Task<CreateSceneOkResponse> CreateSceneAsync(
        ScenePost input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "clip/v2/resource/scene")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CreateSceneOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get details of a single scene from its given `{sceneId}`</summary>
    /// <param name="sceneId">ID of the scene.</param>
    public async Task<GetSceneOkResponse> GetSceneAsync(
        string sceneId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(sceneId, nameof(sceneId));

        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/scene/{sceneId}")
            .SetPathParameter("sceneId", sceneId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetSceneOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Update a single scene from its given `{sceneId}`</summary>
    /// <param name="sceneId">ID of the scene.</param>
    public async Task<UpdateSceneOkResponse> UpdateSceneAsync(
        ScenePut input,
        string sceneId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(sceneId, nameof(sceneId));

        var request = new RequestBuilder(HttpMethod.Put, "clip/v2/resource/scene/{sceneId}")
            .SetPathParameter("sceneId", sceneId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<UpdateSceneOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Delete a single scene from its given `{sceneId}`</summary>
    /// <param name="sceneId">ID of the scene.</param>
    public async Task<DeleteSceneOkResponse> DeleteSceneAsync(
        string sceneId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(sceneId, nameof(sceneId));

        var request = new RequestBuilder(HttpMethod.Delete, "clip/v2/resource/scene/{sceneId}")
            .SetPathParameter("sceneId", sceneId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<DeleteSceneOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
