// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using OpenHue.Http;
using OpenHue.Http.Exceptions;
using OpenHue.Http.Extensions;
using OpenHue.Http.Serialization;
using OpenHue.Models;

namespace OpenHue.Services;

public class ZoneService : BaseService
{
    internal ZoneService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>List all available zones</summary>
    public async Task<GetZonesOkResponse> GetZonesAsync(
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/zone").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetZonesOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Create a new zone</summary>
    public async Task<CreateZoneOkResponse> CreateZoneAsync(
        RoomPut input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "clip/v2/resource/zone")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<CreateZoneOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get details of a single Zone from its given `{zoneId}`</summary>
    /// <param name="zoneId">ID of the Zone</param>
    public async Task<GetZoneOkResponse> GetZoneAsync(
        string zoneId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(zoneId, nameof(zoneId));

        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/zone/{zoneId}")
            .SetPathParameter("zoneId", zoneId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetZoneOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Update a single Zone from its given `{zoneId}`</summary>
    /// <param name="zoneId">ID of the Zone</param>
    public async Task<UpdateZoneOkResponse> UpdateZoneAsync(
        RoomPut input,
        string zoneId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(zoneId, nameof(zoneId));

        var request = new RequestBuilder(HttpMethod.Put, "clip/v2/resource/zone/{zoneId}")
            .SetPathParameter("zoneId", zoneId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<UpdateZoneOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Delete a single Zone from its given `{zoneId}`</summary>
    /// <param name="zoneId">ID of the Zone</param>
    public async Task<DeleteZoneOkResponse> DeleteZoneAsync(
        string zoneId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(zoneId, nameof(zoneId));

        var request = new RequestBuilder(HttpMethod.Delete, "clip/v2/resource/zone/{zoneId}")
            .SetPathParameter("zoneId", zoneId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<DeleteZoneOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
