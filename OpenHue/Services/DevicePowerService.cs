// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using OpenHue.Http;
using OpenHue.Http.Serialization;
using OpenHue.Models;

namespace OpenHue.Services;

public class DevicePowerService : BaseService
{
    internal DevicePowerService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>List all available device powers</summary>
    public async Task<GetDevicePowersOkResponse> GetDevicePowersAsync(
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/device_power").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetDevicePowersOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get power details of a single device from its given `{deviceId}`.</summary>
    /// <param name="deviceId">ID of the device</param>
    public async Task<GetDevicePowerOkResponse> GetDevicePowerAsync(
        string deviceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(deviceId, nameof(deviceId));

        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/device_power/{deviceId}")
            .SetPathParameter("deviceId", deviceId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetDevicePowerOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
