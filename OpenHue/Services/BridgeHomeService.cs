// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using OpenHue.Http;
using OpenHue.Http.Serialization;
using OpenHue.Models;

namespace OpenHue.Services;

public class BridgeHomeService : BaseService
{
    internal BridgeHomeService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>List all available bridge homes.</summary>
    public async Task<GetBridgeHomesOkResponse> GetBridgeHomesAsync(
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "clip/v2/resource/bridge_home").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetBridgeHomesOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get details of a single bridge home from its given `{bridgeHomeId}`.</summary>
    /// <param name="bridgeHomeId">ID of the bridge home.</param>
    public async Task<GetBridgeHomeOkResponse> GetBridgeHomeAsync(
        string bridgeHomeId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(bridgeHomeId, nameof(bridgeHomeId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "clip/v2/resource/bridge_home/{bridgeHomeId}"
        )
            .SetPathParameter("bridgeHomeId", bridgeHomeId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetBridgeHomeOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
